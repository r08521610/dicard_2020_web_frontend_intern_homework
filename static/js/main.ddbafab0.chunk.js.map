{"version":3,"sources":["components/List.js","pages/home/Home.js","pages/home/homeHooks.js","pages/Post.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["List","items","itemBuilder","fetchMore","useState","isFetching","setIsFetching","useEffect","window","addEventListener","handleScroll","removeEventListener","Math","round","document","documentElement","scrollTop","innerHeight","scrollHeight","onScroll","map","item","Home","lastPostId","setLastPostId","posts","setPosts","query","Axios","get","then","res","prevPosts","data","usePosts","history","useHistory","url","useRouteMatch","location","useLocation","sx","maxWidth","mx","px","backgroundColor","post","key","id","p","cursor","onClick","push","pathname","forumAlias","state","isModal","color","fontWeight","title","excerpt","length","Post","useParams","setPost","width","minHeight","whiteSpace","content","Modal","visible","component","onCancel","body","style","position","top","scrollY","scrollTo","parseInt","height","display","alignItems","justifyContent","overflowY","zIndex","App","path","goBack","exact","to","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ddbafab0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst List = ({items, itemBuilder, fetchMore}) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  })\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchMore()\n    setIsFetching(false);\n  }, [fetchMore, isFetching])\n\n  const handleScroll = () => {\n    if (Math.round(document.documentElement.scrollTop + window.innerHeight) >= document.documentElement.scrollHeight) setIsFetching(true);\n  };\n\n  return (\n    <div onScroll={handleScroll}>\n      {\n        items.map((item) => itemBuilder(item))\n      }\n      {isFetching && 'Fetching more posts...'}\n    </div>\n  );\n};\n\nexport default List;","import React, { useState } from 'react';\nimport { useRouteMatch, useHistory, useLocation } from 'react-router-dom';\nimport { Box, Card, Heading, Text } from 'rebass';\n\nimport { usePosts } from './homeHooks';\nimport List from '../../components/List';\n\nconst Home = () => {\n  const [lastPostId, setLastPostId] = useState();\n  const posts = usePosts(lastPostId);\n  const history = useHistory();\n  const { url } = useRouteMatch();\n  const location = useLocation();\n\n  return (\n    <>\n      <Box\n        sx={{\n          maxWidth: ['80%', '60%', '50%'],\n          mx: 'auto',\n          px: 3,\n          backgroundColor: '#eee'\n        }}\n      >\n        <List \n          items={posts}\n          itemBuilder={(post) => (\n            <Card\n              key={post.id}\n              sx={{\n                p: 3,\n                cursor: 'pointer'\n              }}\n              onClick={() => history.push({\n                pathname: `${url}/${post.forumAlias}/p/${post.id}`,\n                state: { isModal: location }\n              })}\n            >\n              <Heading color='rgba(0, 0, 0, 0.95)' fontWeight='600'>{post.title}</Heading>\n              <Text color='rgba(0, 0, 0, 0.6)'>{post.excerpt}</Text>\n            </Card>\n          )}\n          fetchMore={() => setLastPostId(posts[posts.length - 1].id)}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default Home;","import { useState, useEffect } from 'react';\nimport Axios from 'axios';\n\nexport const usePosts = (lastPostId) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const query = lastPostId ? `&before=${lastPostId}` : '';\n    Axios.get(\n      `https://www.dcard.tw/_apicors/posts?popular=true${query}`\n    ).then((res) => {\n      setPosts(prevPosts => [...prevPosts, ...res.data]);\n    });\n  }, [lastPostId]);\n\n  return posts;\n}","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Axios from 'axios';\nimport { Box, Heading, Text } from 'rebass';\n\nconst Post = () => {\n  const { id } = useParams();\n  const [post, setPost] =  useState();\n\n  useEffect(() => {\n    Axios.get(`https://www.dcard.tw/_apicors/posts/${id}`).then((res) => {\n      setPost(res.data);\n    });\n  }, [id]);\n\n  return (\n    <Box\n      sx={{\n        width: ['80%', '60%', '50%'],\n        minHeight: '100%',\n        mx: 'auto',\n        px: 3,\n        backgroundColor: '#eee'\n      }}\n    >\n      <Heading>{post && post.title}</Heading>\n      <Text\n        sx={{\n          whiteSpace: 'pre-line'\n        }}\n      >\n        {post && post.content}\n      </Text>\n    </Box>\n  );\n};\n\nexport default Post;","import React, { useEffect } from 'react';\nimport { Box } from 'rebass';\n\nconst Modal = ({visible, component, onCancel}) => {\n  useEffect(() => {\n    document.body.style.position = 'fixed';\n    document.body.style.top = `-${window.scrollY}px`;\n\n    return () => {\n      const scrollY = document.body.style.top;\n      document.body.style.position = '';\n      document.body.style.top = '';\n      window.scrollTo(0, parseInt(scrollY || '0') * -1);\n    };\n  })\n\n  return visible && (\n    <Box\n      sx={{\n        position: 'fixed',\n        height: '100vh',\n        width: '100vw',\n        display: 'flex',\n        alignItems: 'flex-start',\n        justifyContent: 'center',\n        overflowY: 'scroll'\n      }}\n    >\n      <Box\n        sx={{\n          position: 'fixed',\n          height: '100vh',\n          width: '100vw',\n          backgroundColor: 'rgba(22, 22, 22, 0.9)',\n          zIndex: -1\n        }}\n        onClick={onCancel}\n      />\n      {component}\n    </Box>\n  );\n}\n\nexport default Modal;","import React from 'react';\nimport { Route, Switch, Redirect, useLocation, useHistory } from 'react-router-dom';\nimport './App.css';\n\nimport Home from './pages/home/Home';\nimport Post from './pages/Post';\n\nimport Modal from './components/Modal';\n\nfunction App() {\n  const history = useHistory();\n  const location = useLocation();\n  const isModal = location.state && location.state.isModal;\n  return (\n    <>\n      {isModal && (<Route path=\"/f/:forumAlias/p/:id\">\n        <Modal\n          visible={true}\n          component={(\n            <>\n              {\"Modal\"}\n              <Post />\n            </>\n          )}\n          onCancel={() => history.goBack()}\n        />\n      </Route>)}\n      <Switch location={isModal || location}>\n        <Route path=\"/f/:forumAlias/p/:id\">\n          <Post />\n        </Route>\n        <Route exact path=\"/f\">\n          <Home />\n        </Route>\n        <Route exact path=\"/\">\n          <Redirect to=\"/f\" />\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}